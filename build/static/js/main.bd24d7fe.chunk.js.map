{"version":3,"sources":["services/service_questions.ts","Compnents/QuestionDisplay.tsx","App.tsx","reportWebVitals.ts","index.tsx","swReg.js"],"names":["getQuestions","amount","difficulty","a","fetch","res","json","results","quiz","map","questObj","ind","question","options","array","incorrect_answers","concat","correct_answer","sort","Math","random","answer","QuestionCard","callback","questionNo","totalQuestions","useState","selectedAnswer","setSelectedAns","handleSelection","ev","target","value","html_string","className","dangerouslySetInnerHTML","__html","onSubmit","e","opt","type","name","onChange","required","checked","App","setquiz","showResult","setShowResult","currentStep","setCurrentStep","score","setScore","useEffect","questions","console","log","fetchData","length","userAns","preventDefault","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","swReg","process","navigator","serviceWorker","register","result","catch","err"],"mappings":"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","file":"static/js/main.bd24d7fe.chunk.js","sourcesContent":["import {QuestionType,UsefulQuestion} from './../Types/quiz_types'\n\nconst shuffleArray = (array:any[])=>\n[...array].sort(()=>Math.random()-0.5)\n\n//export let amount1:number,difficulty1:string;\n\nexport const getQuestions = async (amount:number,difficulty:string)=> {\n    const res = await fetch(`https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`);\n    //amount1=amount;\n  //  difficulty1=difficulty;\n    let {results} = await res.json();\n    const quiz:UsefulQuestion[] = results.map((questObj:QuestionType,ind:number)=>{\n        return{\n            question:questObj.question,\n            options:shuffleArray(questObj.incorrect_answers.concat(questObj.correct_answer)),\n            answer:questObj.correct_answer\n        }\n    })\n    return quiz\n}","import React, { useState } from 'react'\nimport { PropsTypeQD } from './../Types/quiz_types'\n\nconst QuestionCard: React.FC<PropsTypeQD> = ({ question, options, callback, questionNo, totalQuestions }) => {\n    let [selectedAnswer, setSelectedAns] = useState(\"\");\n    const handleSelection = (ev: any) => {\n        setSelectedAns(ev.target.value);\n    }\n    const html_string = question;\n\n    return (\n        <div className=\"question-container\">\n            <div className=\"question-number\">\n                <u>QUESTION {questionNo + 1} OF {totalQuestions}</u>.\n            </div>\n            <div className=\"question\" >\n                <p className=\"question-display\" dangerouslySetInnerHTML={{ __html: html_string }}></p>\n            </div>\n            <form className=\"question-form\" onSubmit={(e: React.FormEvent<EventTarget>) => callback(e, selectedAnswer)}>\n                {\n                    options.map((opt: string, ind: number) => {\n                        return (\n                            <div key={ind}>\n                                <label className=\"radio\">\n                                    <input\n                                        type=\"radio\"\n                                        name=\"opt\"\n                                        value={opt}\n                                        onChange={handleSelection}\n                                        required\n                                        checked={selectedAnswer === opt}\n                                    />\n                                    {opt}\n                                </label>\n                            </div>\n                        )\n                    })\n                }\n                <input value={(questionNo === (totalQuestions - 1)) ? \"Finish\" : \"Next\"} type=\"submit\" className=\"submit\" />\n            </form>\n        </div>\n    )\n}\nexport default QuestionCard;","import React, { useEffect, useState } from 'react'\nimport './App.css';\nimport { getQuestions } from './services/service_questions'\nimport { UsefulQuestion } from './Types/quiz_types'\nimport QuestionCard from './Compnents/QuestionDisplay';\n\nfunction App() {\n\n  let [quiz, setquiz] = useState<UsefulQuestion[]>([])\n  let [showResult, setShowResult] = useState(false)\n  let [currentStep, setCurrentStep] = useState(0)\n  let [score, setScore] = useState(0)\n\n  useEffect(() => {\n    async function fetchData() {\n      const questions: UsefulQuestion[] = await getQuestions(5, \"easy\")\n      console.log(questions);\n      setquiz(questions);\n    }\n    fetchData();\n  }, [])\n\n  const handleSubmit = (e: React.FormEvent<EventTarget>, userAns: string) => {\n    if (userAns === quiz[currentStep].answer) {\n      setScore(++score)\n    }\n    e.preventDefault();\n    if (currentStep !== quiz.length - 1) {\n      setCurrentStep(++currentStep);\n    }\n    else {\n      setShowResult(true);\n    }\n  }\n\n  if (!quiz.length) {\n    return (<h3>Loading...</h3>)\n  }\n  if (showResult) {\n    return (\n      <div className=\"question-container result-container\">\n        <h2>Result</h2>\n        <p className=\"result-text\">\n          Your Final Result is\n          <b> {score}</b> out of <b>{quiz.length}</b>\n          <p>PLEASE REFRESH THIS PAGE TO PLAY AGAIN!</p>\n        </p>\n      </div>\n    )\n  }\n  return (\n    <div>\n      <div className=\"Intro-Text\">\n        <p className=\"Welcome\">\n          <b>\n            <u>\n              Welcome to The Trivia-5-Questions Quiz App\n            </u>\n          </b>\n        </p>\n        <p>\n          Here We Will Test Your General-Knowledge By Asking Five Questions In A Row.\n        </p>\n        <p>\n          For Each Answer Please Select A <b>Correct Answer</b> From The Given Options!\n        </p>\n      </div>\n\n\n      <QuestionCard\n        options={quiz[currentStep].options}\n        question={quiz[currentStep].question}\n        callback={handleSubmit}\n        questionNo={currentStep}\n        totalQuestions={quiz.length}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport swReg from './swReg.js'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n\nswReg();","export default function swReg(){\n    let swReg = `${process.env.PUBLIC_URL}/sw.js`;\n    navigator.serviceWorker.register(swReg).then((result)=>{\n      console.log('Registration done! result:',result)\n    })\n    .catch((err)=>{\n      console.log(\"err:\",err)\n    })\n  }"],"sourceRoot":""}